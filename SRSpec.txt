1.	Introduction

Purpose 
The purpose of this document is to build a simple social media application that will allow users to create public posts and interact with
each others' posts in a public feed.


Intended Audience and Reading Suggestions
This project will be mainly focused on social media users, specifically people who want to create posts to share their ideas.

Product Scope
The purpose of this simple social media application is to allow people to make posts that will stay publicated. We plan to build a web application, much like Twitter or Reddit, where users 
will be able to log in with a username and create public posts. Other users of the web app will be able to see and interact other users' posts by liking.

2.	Overall Description

2.1	Product Perspective
    This simple social media web application is developed to exhibit communication between different software pieces. This web application will
be a standalone product with the purpose of learning more about software communication. It will provide an interface for users to log in and 
create public posts. The main focus of this application, however, will be exhibiting software communications as opposed to providing a 
visually pleasing user interface. 

2.2	Product Functions
The main product functions that will be used in this application will facilitate communication between client browsers and the realtime Firebase database.
    1. Browser -> Realtime DB 
            Users will be able to use functions that let their browsers communicate with a realtime database. For example, a function may be used by users 
        to send data making up their posts to be saved in a realtime database. A function may also be used to send the amount of likes a post has recieved
        from other users. 
    3. Browser (local)
            Browsers may use local functions that do not require communication with the server. Such functions will generally be used to create
        a user interface for users to create posts and like posts. 
    4. Server (local)
            The server may use local functions that do not require communication with client browsers. Such functions will generally be used 
        to facilitate database use and locally calculate and visibility of the post using information from the database. 

2.3	User Classes and Characteristics
    This application will only cater to one user class: the users. Users will be provided a user interface where they can view and interact with 
other user posts and create their own. To put in more technically, the user interface will give Users the ability to interact with a realtime database.
Browser-realtime database communication, however, will be abstracted from the users to provide a simpler experience. They will, for the most part,  
interact with the user interface without having to think of any technical details about browser-realtime DB communication. 

2.4	Operating Environment
    We plan to host our web app with Firebase hosting. Any user will be able to access our app simply by searching up this url: ****. 
Users will just have to enter a username upon arrival to start using the application. The Firebase will hold database details that users can connect
to see other users' saved posts or to create and save their own posts via a browser user interface.  

2.5	Design and Implementation Constraints
    Our main constraint will be memory space since Firebase cannot hold a significant amount data before having to pay. If the database and its content proves to be 
too large, we may have to create a memory consolidation scheme to prevent our database from taking too much server memory space. We may also 
just choose to locate our database elsewhere. Our server will become a sort middle-man between user browsers and the database. 

2.6	User Documentation
    Since this web application will be relatively simple and minimal, with our main focus pointed towards establishing browser-realtime DB communication, 
user documenation will be provided in the app. As previously stated, browser-realtime DB communication will be abstracted from the user experience to make 
application usage simpler. 

2.7	Assumptions and Dependencies
    A user interface will be provided to users by accessing our web app through a Firebase hosting link. The client browers will communicate with
Firebase's realtime database by taking snapshots of the current state of the database. Communication errors will most likely happen in the browser-realtime 
database connection. Data may have been altered in the database or fail to be brought up on the browser.

3.	External Interface Requirements

3.1	User Interfaces
    Our project will have a simple interface to allow users to see, create and interact with other users' posts. It will consists of a column of posts
that users have made and the top will have an insert that will allow the user to create a post. Under each post, there will be a like/dislike that
will can be used to determine interactions with the post.

3.2	Hardware Interfaces
    For the simple social media to run, you will need a PC that supports the user of a web browser. This a low resource program so there are no real
hardware limitations. If you are able to run a web browser, you will be able to run the simple social media. You will also need a keyboard and
mouse to interact with the web page.

3.3	Software Interfaces
    The bulk of the software heavylifting is done by Firebase's Firestore realtime database. Firestore is a cloud database. When users see other users' posts
in a public feed, the client browser are using a Firestore functionality allowing then to take snapshots of the current state of a collection in realtime. 
The frontend development of the user interface utilized the React framework. 

3.4	Communications Interfaces
    Firestore allows client browser connections to take 'snapshots' of the current state of a collection. A public feed of other users' posts is created 
through these snapshots. 

4.	System Features

4.1	System Feature 1
Post Creation and Interaction

4.1.1	Description and Priority
    This feature will allow users to create posts and interact with other users' posts. This a high priority features as it is the main component to the simple
    social media.

4.1.2	Stimulus/Response Sequences
     To create a post, the user will have a text insert at the top of the page which will allow them to write their post and they will press a button
     once they are ready to publicize their post. Each post will be shown beneath this text insert and will have a like/dislike button that users can
     use to interact with the post.

4.1.3	Functional Requirements	
    REQ-1:  The text box must allow user to create text and post the text exactly as it was written by the user.
    REQ-2:  Upon failing to connect to the Firestore database, there will be dialog that says there is an error connecting.
    REQ-3:  TBD: There may be a character limit to ensure that there is not too much information stored in the database as we may be limited by Firestore.
